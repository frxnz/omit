<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Omit</title>
    <description>A blog written by Derek Wheelden about front-end web development, CSS, JavaScript, and lots of other things.</description>
    <link>http://omit.io/</link>
    <atom:link href="http://omit.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Johnny-Five: A Beginners Guide To Backpacks</title>
        <description>&lt;p&gt;It’s early days, but Johnny-Five is bringing a whole new world of components to your nodebot. A near-limitless world where up is down and down is written in JavaScript.&lt;/p&gt;

&lt;h2 id=&quot;what-are-backpacks&quot;&gt;What are backpacks?&lt;/h2&gt;

&lt;p&gt;Johnny-Five is an asynchronous, event-based framework. Because of this there are certain things that it’s either bad at, or simply can’t do. Things that are highly timing-sensitive, or that use protocols that Node &lt;a href=&quot;https://github.com/jgautier/firmata&quot;&gt;firmata&lt;/a&gt; doesn’t support. A few examples include NeoPixels, certain Ping sensors, and Nintendo DS touch screens.&lt;/p&gt;

&lt;p&gt;Backpacks are AVRs, or microcontollers, that run a special firmware designed to operate the component and communicate with Johnny-Five. The firmware is standard C++ or Arduino code with an additional layer for sending and receiving commands over I&lt;sup&gt;2&lt;/sup&gt;C. Because much of the processing and data handling is done in Johnny-Five, this firmware tends to be much smaller than an equivalent program written entirely in C++. This means we can use much smaller AVRs.&lt;/p&gt;

&lt;p&gt;While many of these backpacks could be little more than an ATtiny85, smaller Arduinos like the Arduino Pro Mini or Arduino Nano are a little more user-friendly. You can get these Arduinos for as little as $3, you don’t have to worry about wiring, and you get a free bootloader.&lt;/p&gt;

&lt;h2 id=&quot;why-backpacks&quot;&gt;Why backpacks?&lt;/h2&gt;

&lt;p&gt;Historically things like NeoPixels and Ping sensors have required a custom version of Firmata, and were mostly not supported on platforms other than Arduino. If you had a project where you wanted NeoPixels &lt;em&gt;and&lt;/em&gt; Ping sensors, you were stuck writing your own C++ library. Johnny-Five wants you to write JavaScript, not C++.&lt;/p&gt;

&lt;p&gt;With backpacks you’ll never need a custom Firmata, and your components will work on any platform that supports I&lt;sup&gt;2&lt;/sup&gt;C (&lt;a href=&quot;http://johnny-five.io/platform-support/&quot;&gt;most of them do&lt;/a&gt;). Each backpack has its own firmware, which means you can run as many different components as you can fit on an I&lt;sup&gt;2&lt;/sup&gt;C bus–which is a lot.&lt;/p&gt;

&lt;h2 id=&quot;how-do-they-work&quot;&gt;How do they work?&lt;/h2&gt;

&lt;p&gt;To demonstrate how backpacks work, let’s take a look at &lt;a href=&quot;https://github.com/ajfisher/node-pixel&quot;&gt;node-pixel&lt;/a&gt;. Node-pixel is a library for controlling NeoPixels with JavaScript. It’s amazing. For this demo we’ll keep things simple and use an Arduino Uno as our host, and an Arduino Pro Mini as our backpack.&lt;/p&gt;

&lt;h3 id=&quot;load-the-firmware&quot;&gt;Load the firmware&lt;/h3&gt;

&lt;p&gt;First we need to load the firmware onto the backpack, which is just a fancy way of saying we need to load a sketch onto the Pro Mini. In the Arduino IDE open &lt;code&gt;node-pixel/firmware/build/backpack/backpack.ino&lt;/code&gt;, make sure you’ve got your board and port right, and upload the sketch.&lt;/p&gt;

&lt;h3 id=&quot;attach-the-backpack&quot;&gt;Attach the backpack&lt;/h3&gt;

&lt;p&gt;The next step is to attach the backpack. First you need to connect I&lt;sup&gt;2&lt;/sup&gt;C pins. Connect SDA on the host microcontroller to SCL on the backpack, then connect SCL on the host microcontroller to SDA on the backpack. On most Arduino and Arduino-compatible boards SDA is pin A4, and SCL is pin A5, but check the pinout for you board if you’re not sure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backpack/backpack_i2c.png&quot; alt=&quot;Attach I2C Bus&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next attach a ground pin on the backpack to ground on the host board. Finally, you can typically power the backpack directly from the host board. Find a 5V pin (or 3V3 if you’re using a 3.3V backpack) and run it to the VIN or RAW pin on your backpack.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backpack/backpack_power.png&quot; alt=&quot;Attach Power&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;hook-up-the-neopixels&quot;&gt;Hook up the NeoPixels&lt;/h3&gt;

&lt;p&gt;If you’re new to NeoPixels, I highly recommend you read the &lt;a href=&quot;https://learn.adafruit.com/adafruit-neopixel-uberguide/overview&quot;&gt;NeoPixel Überguide&lt;/a&gt;. NeoPixels are sensitive, and it’s easy to damage them. I won’t go into detail here, so read that first if you’re not a Neopixel pro.&lt;/p&gt;

&lt;p&gt;All we have left to do is attach data to a pin on the backpack, and hook up (external) power to the strip. NeoPixels use a lot of power, so it’s always a good idea to power them externally. Just make sure every piece of the circuit shares a common ground.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/backpack/backpack_neopixels.png&quot; alt=&quot;Attach NeoPixels&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;run-your-program&quot;&gt;Run your program&lt;/h3&gt;

&lt;p&gt;Now you’re ready to run your Johnny-Five program just like you’ve always done. We’ll use this for our demo:&lt;/p&gt;

&lt;pre title=&quot;node-pixel demo&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var five = require(&quot;johnny-five&quot;);
var pixel = require(&quot;node-pixel&quot;);

var board = new five.Board();

var fps = 20;

board.on(&quot;ready&quot;, function() {

    var strip = new pixel.Strip({
        data: 6,
        length: 5,
        board: this,
        controller: &quot;I2CBACKPACK&quot;
    });

    strip.on(&quot;ready&quot;, function() {

        var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;cyan&quot;, &quot;magenta&quot;, &quot;white&quot;];
        var current_colors = [0,1,2,3,4];
        var current_pos = [0,1,2,3,4];
        var blinker = setInterval(function() {
            strip.color(&quot;#000&quot;);

            for (var i=0; i&amp;lt; current_pos.length; i++) {
                if (++current_pos[i] &amp;gt;= strip.stripLength()) {
                    current_pos[i] = 0;
                    if (++current_colors[i] &amp;gt;= colors.length) current_colors[i] = 0;
                }
                strip.pixel(current_pos[i]).color(colors[current_colors[i]]);
            }

            strip.show();
        }, 1000/fps);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;et-voila&quot;&gt;Et voila!&lt;/h3&gt;

&lt;h2 id=&quot;current-backpacks&quot;&gt;Current Backpacks&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ajfisher/node-pixel&quot;&gt;node-pixel&lt;/a&gt; by &lt;a href=&quot;https://github.com/ajfisher&quot;&gt;ajfisher&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rwaldron/j5-ds-touch&quot;&gt;DSTouch&lt;/a&gt; by &lt;a href=&quot;https://github.com/rwaldron&quot;&gt;rwaldron&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 20 Aug 2015 17:09:21 -0400</pubDate>
        <link>http://omit.io/2015/08/20/beginners-guide-to-backpacks/</link>
        <guid isPermaLink="true">http://omit.io/2015/08/20/beginners-guide-to-backpacks/</guid>
      </item>
    
      <item>
        <title>Nodebot Part 2 - Refinement</title>
        <description>&lt;h2 id=&quot;building-a-better-robot&quot;&gt;Building a Better Robot&lt;/h2&gt;

&lt;p&gt;When I first set out on this journey, I had no idea what I was doing. I knew I wanted to build a javascript-powered robot, but that was it. After 6 weeks, several soldering-iron burns, and a few late nights, I’m happy to say I still have no idea what I’m doing.&lt;/p&gt;

&lt;p&gt;When you begin a project with no plans, with no goals, the finish line keeps changing. You get to a certain point and you stop, and you think “hey I could make my robot do this”, and then you start working on that. This turns a lot of the decisions you made previously into mistakes. Mistakes are good. Make lots of them.&lt;/p&gt;

&lt;p&gt;But also, read spec sheets, and learn how to calculate torque. Otherwise you’re going to waste a lot of money on motors.&lt;/p&gt;

&lt;h2 id=&quot;improvement-1---intel-edison&quot;&gt;Improvement #1 - Intel Edison&lt;/h2&gt;

&lt;p&gt;Originally I was using an Intel Galileo (gen. 1) to control the bot. The original Galileo was a source of endless frustration, mostly because I couldn’t get the wifi to work. If you do anything with nodebots, you will quickly learn to hate wifi.&lt;/p&gt;

&lt;p&gt;The Edison came out shortly after I start building, and after a couple weeks of trying to get the wifi working on the Galileo I broke down and bought one (built-in wifi? yes please). The Edison has a few other advantages over the Galileo (even the Gen. 2):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Built-in BLE&lt;/li&gt;
  &lt;li&gt;The board itself is very compact, and additional breakouts don’t increase the footprint much&lt;/li&gt;
  &lt;li&gt;Draws very little power. The board itself can be powered with a 3.4v LiPo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Getting the Edison set up was a breeze. Node comes pre-installed, so once you’ve got wifi configured you’re off and running. Under the hood it’s very similar to the Galileo, and within an hour or so I had it running my robot script.&lt;/p&gt;

&lt;h3 id=&quot;light-issues&quot;&gt;Light issues&lt;/h3&gt;

&lt;p&gt;The Edison great, but it has one major shortcoming: It only has 4 PWM pins. With the servos taking up 2 of the pins, it’s hard to add anything else to the bot. For example, I wanted to add an RGB status LED, but that would require 3 PWM pins. Adding an I2C PWM driver could solve that problem, I’m also reconsidering using the Tessel with the servo module I already have.&lt;/p&gt;

&lt;h2 id=&quot;improvement-2---high-torque-servos&quot;&gt;Improvement #2 - High-Torque Servos&lt;/h2&gt;

&lt;p&gt;My robot is fairly heavy. It’s made of MDF and is fairly large. It also uses a little ~1/2” caster as the rear wheel, which tends to drag more than roll. The original motors I bought were tiny high-RPM DC motors. Even at 12V there just wasn’t enough torque.&lt;/p&gt;

&lt;p&gt;So I bought some high-torque continous servos. Not only does this give me more torque, it takes the motor controller out of the equation, which simplifies the circuit quite a bit. The servos also run off 6V, which is a bit easier to manage, battery-wise.&lt;/p&gt;

&lt;p&gt;Despite requiring half the power, the gearing of the servos allows the robot to move much faster on most surfaces. Thick rugs still pose a problem (because of the ball-bearing caster), but it handles most terrain quite well.&lt;/p&gt;

&lt;h3 id=&quot;not-quite-there&quot;&gt;Not quite there&lt;/h3&gt;

&lt;p&gt;I’m very happy with the performance of the servos, but I’m definitely pushing their limits. Any additional load is definitely going to get into stall territory, and I can’t increase the power at all. The next step will probably be to go back to DC motors, and get something with a little (or a lot) more power.&lt;/p&gt;

&lt;h2 id=&quot;improvement-3---infrared-proximity-sensors&quot;&gt;Improvement #3 - Infrared Proximity Sensors&lt;/h2&gt;

&lt;div style=&quot;background-image: url(&#39;https://pbs.twimg.com/media/B5zDlzvIYAIdNIr.jpg:large&#39;)&quot; class=&quot;hero-image&quot;&gt;&lt;/div&gt;

&lt;p&gt;Controlling a robot is hard, so why not make it control itself? I added two short-range infrared sensors to the front of the bot, which allows it to detect obstacles at about 2-12 inches, and change direction to avoid them. This is the only control mechanism on the robot currently. It’s kind of nice because it doesn’t require wifi or bluetooth or anything.&lt;/p&gt;

&lt;h3 id=&quot;looking-forward&quot;&gt;Looking forward&lt;/h3&gt;

&lt;p&gt;You can see the sensors in the photo above. Getting the angle just right is tricky, and it has trouble with very low objects, or walls that are at sharp angles to it. Angling them out more and possibly adding a third sensor in the middle would probably solve those problems.&lt;/p&gt;

&lt;p&gt;What you can’t see in the photo is all the superglue that would eventually be holding the sensor on the left together.&lt;/p&gt;

&lt;h2 id=&quot;futurebot&quot;&gt;FUTUREBOT&lt;/h2&gt;

&lt;p&gt;This little fella has come a long way, but I’m not done yet. In addition to fixing all the issues from above, I’m planning some other upgrades. I’ll probably ditch the MDF chassis for something a little more modular/flexible. I’d also like to improve the steering mechanism, and add some sort of location awareness.&lt;/p&gt;

&lt;p&gt;Enjoy this video of him not running into my shelf thing…&lt;/p&gt;

&lt;iframe class=&quot;vine-embed&quot; src=&quot;https://vine.co/v/OHHEuF6Bag3/embed/simple?related=0&quot; width=&quot;600&quot; height=&quot;600&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.vine.co/static/scripts/embed.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Tue, 30 Dec 2014 16:30:10 -0500</pubDate>
        <link>http://omit.io/2014/12/30/nodebot-part-2-refinement/</link>
        <guid isPermaLink="true">http://omit.io/2014/12/30/nodebot-part-2-refinement/</guid>
      </item>
    
      <item>
        <title>Nodebot Part 1 - Planning</title>
        <description>&lt;h2 id=&quot;introduction-to-robotics&quot;&gt;Introduction to Robotics&lt;/h2&gt;

&lt;p&gt;A few months ago–having a basic understand of 1) electronics, 2) robotics, and 3) javascript–I decided I should definitely build a robot. Being an impulsive millenial I thought it best to begin my quest without actually learning anything new. I am a special genius that can do anything.&lt;/p&gt;

&lt;p&gt;With a pile of microcontrollers and cashmoneydollars in hand, I began buying parts and bandsaw blades. As you do.&lt;/p&gt;

&lt;div style=&quot;background-image: url(&#39;/img/mean-steve-front.jpg&#39;)&quot; class=&quot;hero-image&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;a-brief-foray-into-microcontrollers&quot;&gt;A brief foray into microcontrollers&lt;/h2&gt;

&lt;p&gt;Choosing the right microcontroller is like choosing a fine wine. You buy a bunch of them, drink all of them, and then when you wake up the next morning you close the blinds and ask everyone to be quiet.&lt;/p&gt;

&lt;p&gt;There are probably at least a dozen microcontrollers out there. Maybe even more, I’d have to check. These are the ones I’ve tried so far:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Arduino Uno&lt;/li&gt;
  &lt;li&gt;Raspberry Pi Model B&lt;/li&gt;
  &lt;li&gt;Arduino Yun&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Intel Galileo&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Tessel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are great microcontollers (well, except for the Yun maybe). But we’re building a nodebot, so we have a few requirements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Can run Node.js&lt;/li&gt;
  &lt;li&gt;Can function untethered to a computer&lt;/li&gt;
  &lt;li&gt;At &lt;em&gt;least&lt;/em&gt; 2 PWM pins - one for each motor&lt;/li&gt;
  &lt;li&gt;Wifi is a plus&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Arduino Uno can run Node, but only when tethered to a computer. The Raspberry Pi only has 1 PWM pin. The Tessel is probably up to the task, but the runtime is a work in progress and it’s a little light on GPIO pins. This leaves us with the Arduino Yun and the Intel Galileo. The Yun is actually the perfect candidate on paper. Unfortunately I could never get it to work (more on that later). Luckily the Galileo is only slightly less perfect (more on that later).&lt;/p&gt;

&lt;h2 id=&quot;node-dot-javascript&quot;&gt;Node dot javascript&lt;/h2&gt;

&lt;p&gt;I started my college career as an electrical engineering student, and spent some time programming microcontrollers in C. Based on that experience, I never want to actually learn C. The space in my brain is better reserved for 30 Rock quotes and taco recipes. Javascript, on the other hand, I use every day (I also use 30 Rock quotes every day).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rwaldron/johnny-five/&quot;&gt;Johnny-Five&lt;/a&gt; is the library I’m using to program my nodebot. Why? Well for one thing it’s called Johnny-Five. It’s also developed at Bocoup, which I am a big fan of. It’s open source, it’s actively developed by some great people, it’s really good. It also supports – or has plugins to support – every board I’ve tried (Yun is in progress and no one is happy about it).&lt;/p&gt;

&lt;p&gt;If you’re interested in seeing the code that controls the robot, &lt;a href=&quot;https://github.com/frxnz/nodebotnik/&quot;&gt;it’s all here&lt;/a&gt;. We’ll go through this in a little more detail in a future post.&lt;/p&gt;

&lt;h2 id=&quot;basic-principles-of-design&quot;&gt;Basic principles of design&lt;/h2&gt;

&lt;p&gt;For my first robot I wanted to keep things pretty simple. I wanted something that I could build upon over time, but would be simple to get started. I decided to go with a 2-wheel design, using standard DC gear motors. DC motors are very easy to use, and the 2-wheel design means I don’t have to worry about steering mechanisms – spin the wheels at different speeds and the robot will turn.&lt;/p&gt;

&lt;p&gt;Power is another thing I needed to consider. I decided to power the Galileo and the motors separately. This makes the wiring a &lt;em&gt;little&lt;/em&gt; more complicated, but it means I can play with the motor voltage without having to worry about frying the controller. We’ll talk more about power later.&lt;/p&gt;

&lt;iframe class=&quot;vine-embed&quot; src=&quot;https://vine.co/v/OiOViXFHBX0/embed/simple?related=0&quot; width=&quot;600&quot; height=&quot;600&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.vine.co/static/scripts/embed.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;how-did-that-whole-not-really-planning-thing-go&quot;&gt;How did that whole not really planning thing go?&lt;/h2&gt;

&lt;p&gt;Good decisions I’ve made up to this point:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Intel Galileo (sort of)&lt;/li&gt;
  &lt;li&gt;Johnny-Five&lt;/li&gt;
  &lt;li&gt;2-wheel design&lt;/li&gt;
  &lt;li&gt;Separate motor and board power supplies&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bad decisions I’ve made up to this point:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Thinking I only needed a 1amp board supply&lt;/li&gt;
  &lt;li&gt;Not calculating motor torque requirements&lt;/li&gt;
  &lt;li&gt;Not distributing weight evenly&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Galileo works pretty well. Had I started about a month later I probably would have used an Intel Edison instead. We’ll dive deeper into this in a later post, but basically the Edison (and the Galileo Gen. 2) fixes all the issues I had with the Galileo.&lt;/p&gt;

&lt;p&gt;I’m powering the board with a 5V 1A Jackery charger. The H-Bridge on its own tops out at about 1amp. Between the board and the RGB LED I had hooked up, I was definitely maxing out my power supply. When the LED was blinking the motors would kind of pulse. This was not the desired outcome.&lt;/p&gt;

&lt;p&gt;I bought 175RPM DC gearmotors for my robot. Initially I was powering them with a 9V battery. The thing wouldn’t budge on carpet, and was sluggish on hardwood. I switched to a 12V supply (8xAA batteries) which made a huge difference, but it was still sluggish on carpet. A lower gear ratio would probably yield better results on carpet. I also didn’t balance the load well, which meant the wheel with more weight on it would spin a bit slower. This made straight lines difficult.&lt;/p&gt;

&lt;h2 id=&quot;futurebot&quot;&gt;Futurebot&lt;/h2&gt;

&lt;p&gt;The next steps will be to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swap out the Galileo for an Edison&lt;/li&gt;
  &lt;li&gt;Swap out the gearmotors with high-torque continuous-rotation servos&lt;/li&gt;
  &lt;li&gt;Swap out the AA batteries with a 4S LiPo&lt;/li&gt;
  &lt;li&gt;Swap out the 5V 1A Jackery with a 2A model&lt;/li&gt;
  &lt;li&gt;Add a couple infrared sensors to make it semi-autonomous&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 28 Nov 2014 16:09:21 -0500</pubDate>
        <link>http://omit.io/2014/11/28/nodebot-part-1-planning/</link>
        <guid isPermaLink="true">http://omit.io/2014/11/28/nodebot-part-1-planning/</guid>
      </item>
    
      <item>
        <title>Everything is Designed</title>
        <description>&lt;h2 id=&quot;every-single-god-damn-thing&quot;&gt;Every single god damn thing.&lt;/h2&gt;

&lt;p&gt;Pick up the most trivial thing on your desk. Look at it. Do you see it? You’re
probably thinking something along the lines of “this is a free bank pen this is
just what pens look like”. Now work your backwards, from your desk to wherever a
free bank pen starts. You probably got it from your bank, or borrowed it from a
coworker and never gave it back. Before that the bank probably went through an
office supply catalog, found the cheapest pen, and ordered 1,000,000 of them
with their logo (marketing!).&lt;/p&gt;

&lt;p&gt;But generic terrible pens don’t just exist in nature. At some point, that pen
had to be manufactured. Before they could dump the plastic in a mold, they had
to make the mold. Which means they probably needed a 3D model to feed into a CNC
machine, which means—someone had to design that pen.&lt;/p&gt;

&lt;p&gt;“But, surely, this pen was not designed by a &lt;em&gt;designer&lt;/em&gt;”. You may be right.
Some engineer probably dicked around in AutoCAD until he had something that
resembled a pen. And hey do you think maybe that’s why it’s such a shitty pen?&lt;/p&gt;

&lt;h2 id=&quot;whats-your-favorite-pen&quot;&gt;What’s your favorite pen?&lt;/h2&gt;

&lt;p&gt;A nice pen has a lot of characteristics that differentiate it from the pen you
stole from your cowor…got free from the bank. It probably has a nice balanced
weight to it. It probably doesn’t require as much pressure to get a good ink
flow. It probably even looks kind of nice.&lt;/p&gt;

&lt;p&gt;Every single on of those characteristics is a
design consideration. Designers don’t just make things look pretty. Every facet
of this pen, from it’s conception to the moment it goes into production, is a
deliberate design decision. The balance, the ink flow, the way it sounds when
click the little clicky thing. These are design decisions. These are why this
pen is your favorite pen.&lt;/p&gt;

&lt;h2 id=&quot;everything&quot;&gt;Everything.&lt;/h2&gt;

&lt;p&gt;A web designer is, fundamentally, not that different from an industrial
designer. Ultimately the task is to conceptualize some &lt;em&gt;thing&lt;/em&gt; that accomplishes
a set of goals. The biggest difference is that the Vice President of Pens is
never going to walk up to a CNC operator and suggest that he just make a pen
with no plans, with no design.&lt;/p&gt;

&lt;p&gt;“This doesn’t really need to be designed, does it?”&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Aug 2014 17:34:21 -0400</pubDate>
        <link>http://omit.io/2014/08/25/everything-is-designed/</link>
        <guid isPermaLink="true">http://omit.io/2014/08/25/everything-is-designed/</guid>
      </item>
    
      <item>
        <title>Improving Your Gulp Failures</title>
        <description>&lt;h2 id=&quot;or-we-all-make-mistakes&quot;&gt;Or, we all make mistakes.&lt;/h2&gt;

&lt;p&gt;Gulp is great for watching files, and then doing stuff when those files change.
Gulp is, out of the box, not even a little great at handling errors when things
inevitably go wrong. If you’re just using the basic Gulp methods and plugins,
you probably spend a lot of time restarting your tasks. If you’re me, this is
especially relevant when writing Sass. I’m a sloppy typer.&lt;/p&gt;

&lt;h2 id=&quot;first-an-example&quot;&gt;First, an example&lt;/h2&gt;

&lt;p&gt;Let’s say our Gulpfile looks something like this:&lt;/p&gt;

&lt;pre title=&quot;Hark, A Gulpfile&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var gulp    = require(&#39;gulp&#39;),
    sass    = require(&#39;gulp-ruby-sass&#39;),
    prefix  = require(&#39;gulp-autoprefixer&#39;);

gulp.task(&#39;sass-dev&#39;, function () {

    return gulp.src(&#39;scss/main.scss&#39;)
        .pipe(sass({
            sourcemap : true,
            style     : &#39;compact&#39;,
            precision : 4,
        }))
        .pipe(prefix())
        .pipe(gulp.dest(&#39;css&#39;));

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty reasonable Gulpfile there, right? Compiles Sass, runs Autoprefixer, and
then pipes the stream on over to a CSS folder. Unfortunately, if an error occurs
in Sass or Autoprefixer, your whole task will just up and quit. You’ll have to
go back over to Terminal and start the task again. Gross.&lt;/p&gt;

&lt;h3 id=&quot;yea-but-cant-i-justmdash&quot;&gt;Yea but can’t I just—&lt;/h3&gt;

&lt;p&gt;It stands to reason you could just catch the error with &lt;code&gt;on(&#39;error&#39;)&lt;/code&gt;, maybe log
it with &lt;code&gt;gutil&lt;/code&gt;, and move on. Surprise! This doesn’t really work. Your error
will get logged, but Gulp will unpipe the stream and just generally kind of
overreact.&lt;/p&gt;

&lt;h2 id=&quot;hey-guys-its-plumber&quot;&gt;Hey guys it’s plumber!&lt;/h2&gt;

&lt;p&gt;There is a Gulp plugin called &lt;code&gt;gulp-plumber&lt;/code&gt; that can solve all of our problems.
It replaces the the standard &lt;code&gt;onerror&lt;/code&gt; and handles the error more gracefully. If
we add just a couple lines to our Gulp task, we can greatly improve our workflow:&lt;/p&gt;

&lt;pre title=&quot;Hark, A Gulpfile&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var gulp    = require(&#39;gulp&#39;),
    sass    = require(&#39;gulp-ruby-sass&#39;),
    prefix  = require(&#39;gulp-autoprefixer&#39;),
    plumber = require(&#39;gulp-plumber&#39;);

gulp.task(&#39;sass-dev&#39;, function () {

    return gulp.src(&#39;scss/main.scss&#39;)
        .pipe(plumber(function () {
            console.log(&#39;There was an issue compiling Sass&#39;);
            this.emit(&#39;end&#39;);
        }))
        .pipe(sass({
            sourcemap : true,
            style     : &#39;compact&#39;,
            precision : 4,
        }))
        .pipe(prefix())
        .pipe(gulp.dest(&#39;css&#39;));

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gulp-plumber&lt;/code&gt; catches any errors, logs it, and then…crashes? Yes. That
&lt;code&gt;this.emit(&#39;end&#39;)&lt;/code&gt; is what really makes this great. &lt;code&gt;gulp-plumber&lt;/code&gt; does any
error handling you want it to do, and then &lt;code&gt;this.emit(&#39;end&#39;)&lt;/code&gt; actually
gracefully ends the task, leaving &lt;code&gt;watch&lt;/code&gt; to continue doing its thing. You can
use plumber anywhere you would normally use &lt;code&gt;on(&#39;error&#39;)&lt;/code&gt;, which should be
anywhere a task could possibly fail.&lt;/p&gt;

&lt;h2 id=&quot;hey-guys-its-beepbeep-and-colors&quot;&gt;Hey guys it’s beepbeep and colors!&lt;/h2&gt;

&lt;p&gt;Now that we’re handling our errors a little better, let’s make the output work a
little harder for us. There are two plugins I really like for this: &lt;code&gt;beepbeep&lt;/code&gt;
and &lt;code&gt;colors&lt;/code&gt;. These are actually just regular Node modules, not Gulp plugins,
but they provide some nice feedback improvements.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;beepbeep&lt;/code&gt; will fire your system’s alert sound wherever you call it. This is
nice for error handling where you don’t necessarily have your console visible.
You might not realize your task is erroring if you can’t see it, so having some
auditory feedback is nice.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;colors&lt;/code&gt; just changes the color of your &lt;code&gt;console.log&lt;/code&gt;. Again a small thing, but
if you color-code certain messages it can help you find errors and other things
much faster.&lt;/p&gt;

&lt;p&gt;Using these two modules, this is what my Sass task actually looks like:&lt;/p&gt;

&lt;pre title=&quot;Hark, A Gulpfile&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var gulp    = require(&#39;gulp&#39;),
    beep    = require(&#39;beepbeep&#39;),
    plumber = require(&#39;gulp-plumber&#39;),
    sass    = require(&#39;gulp-ruby-sass&#39;),
    prefix  = require(&#39;gulp-autoprefixer&#39;),
    colors  = require(&#39;colors&#39;);

// Compile Sass with Source Maps
gulp.task(&#39;sass-dev&#39;, function () {

    console.log(&#39;[sass]&#39;.bold.magenta + &#39; Compiling Sass&#39;);

    return gulp.src(&#39;scss/main.scss&#39;)
        .pipe(plumber(function () {
            beep();
            console.log(&#39;[sass]&#39;.bold.magenta + &#39; There was an issue compiling Sass\n&#39;.bold.red);
            this.emit(&#39;end&#39;);
        }))
        .pipe(sass({
            sourcemap : true,
            style     : &#39;compact&#39;,
            precision : 4,
        }))
        .pipe(prefix())
        .pipe(gulp.dest(&#39;css&#39;));

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I like to label task-specific logs with the task name in magenta, so I can
easily tell which task is yelling at me. Errors get logged in red so I can
quickly find the actual Sass error output. Gulp is all about improving your
workflow, and although these are small touches, they really make it easier to
quickly scan your console output.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 May 2014 16:19:21 -0400</pubDate>
        <link>http://omit.io/2014/05/26/improving-your-gulp-failures/</link>
        <guid isPermaLink="true">http://omit.io/2014/05/26/improving-your-gulp-failures/</guid>
      </item>
    
      <item>
        <title>Sass, Gulp, Source Maps, and You</title>
        <description>&lt;p&gt;I’ve been using Gulp for my projects lately, and one of the most important
features for me is the ability to compile Sass. I use a lot of the newer
features of Sass, and I’ve run into a few issues.&lt;/p&gt;

&lt;p&gt;If you just want to see how I use Sass 3.3 with Gulp, here is a gist of the
&lt;a href=&quot;https://gist.github.com/frxnz/ab278e1d7d6088fdb64c&quot;&gt;gulpfile I use for this site&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;so-you-want-the-latest-features-of-sass&quot;&gt;So you want the latest features of Sass&lt;/h2&gt;

&lt;p&gt;Sass 3.3 was released in March, and along with it a ton of great new features.
You can read about many of them on the
&lt;a href=&quot;http://blog.sass-lang.com/posts/184094-sass-33-is-released&quot;&gt;Sass blog&lt;/a&gt; or you
can see all of them in the
&lt;a href=&quot;http://sass-lang.com/documentation/file.SASS_CHANGELOG.html#330_7_March_2014&quot;&gt;changelog&lt;/a&gt;.
What you’re probably interested in, though, is how you can get the most out of
these new features in your current workflow, or you’re getting started and you
want to make sure you can use these new features.&lt;/p&gt;

&lt;p&gt;Build tools like Gulp allow us to create tasks to automate a lot of
the things we’ve had to do manually, or with a slew of third-party apps and
command lines, or things that we just couldn’t do. If you’re using a build tool
already, you’re probably even using it to compile Sass. What you may not realize
is you’re probably missing out on some things.&lt;/p&gt;

&lt;h2 id=&quot;libsass-to-the-rescue&quot;&gt;Libsass to the rescue?&lt;/h2&gt;

&lt;p&gt;With Gulp there are two ways to compile Sass. You can use the Ruby compiler, or
you can use the Node implementation of Libsass. If you’re not familiar with
Libsass, it is a port of Sass written in C/C++. The benefit of using Libsass in
Node is that it runs faster, and conforms to Node standard practices. This is
great for things like Gulp, because it’s very easy to implement.&lt;/p&gt;

&lt;p&gt;Libsass is under active development, and is backed by Moovweb, but it’s still
playing catch-up. There are actually features from Sass 3.2 that haven’t been
implemented yet, and as of now 3.3 are
&lt;a href=&quot;http://www.solitr.com/blog/2014/01/state-of-libsass/&quot;&gt;not a priority&lt;/a&gt;. So if
you want to take advantage of the newest features of Sass, Libsass is probably
not for you.&lt;/p&gt;

&lt;h2 id=&quot;ok-so-ruby-then-great&quot;&gt;Ok so Ruby then, great?&lt;/h2&gt;

&lt;p&gt;Gulp has two Sass plugins: &lt;code&gt;gulp-sass&lt;/code&gt; and &lt;code&gt;gulp-ruby-sass&lt;/code&gt;. For those of us
wanting Sass 3.3 features, &lt;code&gt;gulp-ruby-sass&lt;/code&gt; is where it’s at. For the most
part it really gets the job done, but there are a couple caveats. First it might
help to understand how &lt;code&gt;gulp-ruby-sass&lt;/code&gt; works under the hood.&lt;/p&gt;

&lt;p&gt;The plugin actually executes the Ruby command-line command using Node’s &lt;code&gt;spawn&lt;/code&gt;.
This is great because it means you’re using exactly the compiler that Sass was
built to use. Since Gulp is stream based—meaning it doesn’t work on files
directly—the plugin has to do a little bit of trickery. Essentially what
happens is the plugin moves the Sass file in question to the system’s temp
directory, runs the Ruby command on that, grabs the contents of the output, and
pipes that back to Gulp as a stream.&lt;/p&gt;

&lt;p&gt;This has 2 major implications. First, it’s kind of slow, especially when you get
into larger projects. I have a project now that takes about 6s to compile.
Second, source maps get a little weird.&lt;/p&gt;

&lt;h2 id=&quot;lets-talk-about-source-maps&quot;&gt;Let’s talk about source maps&lt;/h2&gt;

&lt;p&gt;Source maps are great, and as far as I’m concerned they’re the best feature of
Sass 3.3. In recent version of Chrome and Firefox dev tools, you actually see
the partial that contains the code for the styles on the element you’re
inspecting. This makes it a lot easier to find exactly where some code you’re
debugging lives. If your source maps are built correctly, you can even click
on the partial name in Chrome and see the code right there. &lt;em&gt;If your source maps
are built correctly.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Remember when I said &lt;code&gt;gulp-ruby-sass&lt;/code&gt; was working on files copied over to the
system temp directory? Yea, that causes some issues. Source maps normally
contain relative paths to the files being concatenated. So you’d normally see
something like &lt;code&gt;../scss/modules/_widget.scss&lt;/code&gt;. When you start moving things into
those temp folders, the paths start to look more like
&lt;code&gt;../../../../project/scss/modules/_widget.scss&lt;/code&gt;. Not good.&lt;/p&gt;

&lt;p&gt;There is &lt;a href=&quot;https://github.com/sindresorhus/gulp-ruby-sass/issues/17&quot;&gt;an open issue&lt;/a&gt;
on GitHub, but it might be a while before the problem is resolved. In the
meantime, this isn’t really a dealbreaker. You’ll still get your partial names
and line numbers, you just won’t be able to see the code in Chrome. Certainly
better than nothing.&lt;/p&gt;

&lt;h2 id=&quot;speed-vs-features&quot;&gt;Speed vs. Features&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;gulp-ruby-sass&lt;/code&gt; is not perfect, but even with it’s flaws, it is much more
feature-rich than it’s libsass brother. What it really comes down to is whether
you need fast compilation, or the latest features of Sass. For me, even it’s it
slightly-broken state, source maps are worth a couple extra seconds of
compilation time.&lt;/p&gt;
</description>
        <pubDate>Sat, 24 May 2014 15:52:21 -0400</pubDate>
        <link>http://omit.io/2014/05/24/sass-gulp-sourcemaps-and-you/</link>
        <guid isPermaLink="true">http://omit.io/2014/05/24/sass-gulp-sourcemaps-and-you/</guid>
      </item>
    
      <item>
        <title>Doing it Live: CSS Preprocessing and JS Hinting</title>
        <description>&lt;p&gt;&lt;em&gt;This is an illustration of a concept, this is not a tutorial and is not even close to production-ready code. Use this as a jumping-off point for actual good code. If you just want to jump into the code, &lt;a href=&quot;https://github.com/frxnz/node-preprocessor&quot;&gt;head to GitHub&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;if-you-edit-code-in-the-browser-you-might-like-this&quot;&gt;If you edit code in the browser, you might like this.&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re a &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt; user you&amp;rsquo;ve seen this before. You&amp;rsquo;re editing code in the browser, typing away, and then you pause for a second and your Sass or LESS magically turns into compiled CSS. Or perhaps you&amp;rsquo;re writing some JavaScript, and not doing a great job, and boom there&amp;rsquo;s your JSHint error message. If you&amp;rsquo;re not a CodePen user, you should be, but you still might find this helpful.&lt;/p&gt;

&lt;p&gt;How does this happen? If we open up the dev tools and take a peak at the network panel on CodePen, we get some clues.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/codepen-preprocessors.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Every time you stop typing you&amp;rsquo;ll see that &lt;code&gt;preprocessors&lt;/code&gt; entry, and if you look at the response you&amp;rsquo;ll see that (at least in this case) it responded with some compiled CSS. Essentially what&amp;rsquo;s happening is this: after you&amp;rsquo;ve stopped typing a POST is sent to the server, containing the pre-compiled CSS and a property to let the server know which compiler to use. The server compiles the Sass or LESS or whatever, and sends back the compiled CSS.&lt;/p&gt;

&lt;p&gt;CodePen happens to use Ruby for this, but I&amp;rsquo;m going to explain how you might do it using Node. I&amp;rsquo;m also going to assume you know a bit about Node&amp;mdash;including how to set up an Express server, and how routing works in Express.&lt;/p&gt;

&lt;h2&gt;The Server&lt;/h2&gt;

&lt;p&gt;The way I&amp;rsquo;m going to illustrate this requires a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An Express server&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app.use(express.json())&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Two GET routes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;rsquo;m sure there are plenty of other ways to configure a server to do this, but this is what I&amp;rsquo;ll be using.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;express.json()&lt;/code&gt; is necessary because we will be returning our data as JSON. The GET routes are necessary because we will be calling the methods via AJAX. This is what you&amp;rsquo;ll need in your server:&lt;/p&gt;

&lt;pre title=&quot;Express Server&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
// This will go with the rest of yout middleware config.
// In this case app = express(), adjust for your server.
app.use(express.json());

// These are our API routes. &#39;api&#39; refers to the file
// you&#39;ll be exporting your API methods from. In my case
// api = require(&#39;./routes/api&#39;),
app.get(&#39;/api/jshint&#39;,     api.jshint);
app.get(&#39;/api/preprocess&#39;, api.preprocess);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will probably need to adjust a few things in there to work with your server, but that should give you the general idea.&lt;/p&gt;

&lt;h2&gt;The API Methods&lt;/h2&gt;

&lt;p&gt;For the &lt;code&gt;./routes/api&lt;/code&gt; module you&amp;rsquo;ll need to require a few dependencies. LESS and JSHint are both written in JavaScript, so we&amp;rsquo;re using their official Node modules. Sass is written in Ruby, so we&amp;rsquo;re using a Node port, which is actually based on libsass. libsass is very actively maintained and should work for most purposes.&lt;/p&gt;

&lt;pre title=&quot;API Dependencies&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var sass   = require(&#39;node-sass&#39;),
    less   = require(&#39;less&#39;);
    jshint = require(&#39;jshint&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;JSHint&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s not a lot to the JSHint method. This endpoint will return a &lt;code&gt;data&lt;/code&gt; object containing an array of error objects. There are a number of options that can be changed, but we&amp;rsquo;ll just stick with the defaults for now.&lt;/p&gt;

&lt;pre title=&quot;JSHINT Method&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
exports.jshint = function(req, res) {
    var // The actual hinting is done using a method called JSHINT
        hint = jshint.JSHINT,

        // The code that we&#39;re hinting will be passed in as a querystring
        code = req.query.js;

        // This will run hint (jshint.JSHINT) on our code.
        // If there are errors, our response will be hint.errors
        // otherwise the resonse will be null
        response = !hint(code) ? hint.errors : null;

    // This will send the JSHint response back to the requester as json
    res.jsonp({ &quot;data&quot; : response });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The response, if there are errors, will look something like this:&lt;/p&gt;

&lt;pre title=&quot;JSHINT Response&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
{
    data: [
        {
            id: &quot;(error)&quot;,
            raw: &quot;Missing semicolon.&quot;,
            code: &quot;W033&quot;,
            evidence: &quot;var foo=bar&quot;,
            line: 1,
            character: 13,
            scope: &quot;(main)&quot;,
            reason: &quot;Missing semicolon.&quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;CSS Preprocessors&lt;/h3&gt;

&lt;p&gt;For Sass and LESS we&amp;rsquo;re only using one route. This way if your code editor supports multiple preprocessors, the burden of routing is placed on the server rather than the requester. The preprocessor will be passed as a querystring parameter, and the server will handle the rest.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;preprocess&lt;/code&gt; route works more or less the same way as the &lt;code&gt;jshint&lt;/code&gt; route. It takes in code as a querystring parameter, and returns JSON as the response. Similarly, if there is an error in the code, this route will return an &lt;code&gt;error&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Unlike the &lt;code&gt;jshint&lt;/code&gt; route, our &lt;code&gt;preprocess&lt;/code&gt; route actually returns processed CSS in a &lt;code&gt;data&lt;/code&gt; object if there are no errors.&lt;/p&gt;

&lt;pre title=&quot;Preprocessor Config&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
exports.preprocess = function(req, res) {

    var // First let&#39;s grab the querystring parameters
        // This is how we will determine which module to use
        lang = req.query.lang,

        // This is the Sass/LESS we&#39;re going to process
        code = req.query.css;

    if (lang === &#39;sass&#39;) {
        // sass.render will process the code we send it,
        // If there are errors it will return them,
        // otherwise it will return compiled CSS
        sass.render({
            data: code,
            success: function(css){
                res.jsonp({ &quot;data&quot; : css });
            },
            error: function(error) {
                res.jsonp({ &quot;error&quot; : error });
            },
            // This accepts the same output styles as the
            // Ruby compiler
            outputStyle: &#39;compressed&#39;
        });
    }

    if (lang === &#39;less&#39;) {
        // less.render takes in the code, and a callback function.
        // If error is defined, we will return an error object,
        // otherwise we will return the compiled CSS
        less.render(code, function (error, css) {
            if (error) {
                res.jsonp({ &quot;error&quot; : error });
            } else {
                res.jsonp({ &quot;data&quot; : css });
            }
        });
    }

};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Putting it all together&lt;/h3&gt;

&lt;p&gt;Your &lt;code&gt;./routes/api.js&lt;/code&gt; file should look like this:&lt;/p&gt;

&lt;pre title=&quot;./routes/api.js&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var sass   = require(&#39;node-sass&#39;),
    less   = require(&#39;less&#39;);
    jshint = require(&#39;jshint&#39;);

exports.jshint = function(req, res) {
    var hint     = jshint.JSHINT,
        code     = req.query.js;
        response = !hint(code) ? hint.errors : null;

    res.jsonp({ &quot;data&quot; : response });
};

exports.preprocess = function(req, res) {

    var lang = req.query.lang,
        code = req.query.css;

    if (lang === &#39;sass&#39;) {
        sass.render({
            data: code,
            success: function(css){
                res.jsonp({ &quot;data&quot; : css });
            },
            error: function(error) {
                res.jsonp({ &quot;error&quot; : error });
            },
            outputStyle: &#39;compressed&#39;
        });
    }

    if (lang === &#39;less&#39;) {
        less.render(code, function (error, css) {
            if (error) {
                res.jsonp({ &quot;error&quot; : error });
            } else {
                res.jsonp({ &quot;data&quot; : css });
            }
        });
    }

};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Using The Thing&lt;/h2&gt;

&lt;p&gt;On the client-side, you&amp;rsquo;ll be making AJAX calls to the server we just set up as as the user types. If you&amp;rsquo;re building something like CodePen you would either display the errors, or use the compiled CSS to render a preview. If you were writing a CMS with a code editor, you would display the errors or hold onto the compiled CSS to be stored in a database when the user saves.&lt;/p&gt;

&lt;p&gt;This is an extremely basic demo of the concept, but in an actual production environment the performance should be quite good. Doing a round-trip every time a user stops timing might seem a little crazy, but you&amp;rsquo;re not really transferring a lot of data. CodePen does it with over 100,000 users creating thousands of Pens per day.&lt;/p&gt;

&lt;h2&gt;Clone it! Fork it! Whatever!&lt;/h2&gt;

&lt;p&gt;If you just want to play around with this, you can &lt;a href=&quot;https://github.com/frxnz/node-preprocessor&quot;&gt;clone my GitHub repo&lt;/a&gt; and follow the installation instructions to get it running.&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Feb 2014 16:38:21 -0500</pubDate>
        <link>http://omit.io/2014/02/02/doing-it-live-css-preprocessing-and-js-hinting/</link>
        <guid isPermaLink="true">http://omit.io/2014/02/02/doing-it-live-css-preprocessing-and-js-hinting/</guid>
      </item>
    
      <item>
        <title>Make a Thing Blurry With CSS</title>
        <description>&lt;h2 id=&quot;disclaimer-this-isnrsquot-going-to-be-great&quot;&gt;Disclaimer: This Isn’t Going to be Great&lt;/h2&gt;

&lt;p&gt;Making things blurry with CSS is a thing we can do now. That&amp;rsquo;s pretty awesome. But there are some pitfalls that make it kind of iffy. Browser support for straight-up CSS blurring (&lt;code&gt;filter: blur(10px)&lt;/code&gt;) is pretty terrible. Like webkit-only terrible. And when it does work, it doesn&amp;rsquo;t look great. Transitions are also a little janky. Personally, I don&amp;rsquo;t think this guy is ready for primetime.&lt;/p&gt;

&lt;p&gt;That said, it doesn&amp;rsquo;t look terrible on text, and there are ways to improve browser support. If you need to blur some stuff &lt;em&gt;today&lt;/em&gt;, here&amp;rsquo;s what you can do.&lt;/p&gt;

&lt;h2&gt;First, a demo!&lt;/h2&gt;

&lt;p data-height=&quot;300&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;bmAqI&quot; data-user=&quot;frxnz&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/frxnz/pen/bmAqI&quot;&gt;bmAqI&lt;/a&gt; by Derek Wheelden (&lt;a href=&quot;http://codepen.io/frxnz&quot;&gt;@frxnz&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So this is kind of the cleanest implementation of &lt;code&gt;blur&lt;/code&gt;, and it also highlights all of the weaknesses.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It only works in webkit.&lt;/li&gt;
&lt;li&gt;The transitions aren&amp;rsquo;t smooth at all.&lt;/li&gt;
&lt;li&gt;If you watch edges of the photos, you&amp;rsquo;ll notice they look pretty bad.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;A little background on filters&lt;/h2&gt;

&lt;p&gt;So &lt;code&gt;filter: blur()&lt;/code&gt; actually applies the SVG filter feGaussianBlur to whatever element you apply it to. This is important to note because it will actually help us deal with browser support.&lt;/p&gt;

&lt;p&gt;Newer versions of Firefox and IE(10+) support both the &lt;code&gt;filter&lt;/code&gt; property and SVG. They just don&amp;rsquo;t really have an implementation that combines them the way webkit does. So let&amp;rsquo;s look at how we can use this to improve browser support for the blur filter.&lt;/p&gt;

&lt;h2&gt;SVG in markup, kinda gross&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ve probably seen SVG inside an HTML document. It&amp;rsquo;s a great way to add scalable vector graphics to your page. It just so happens that you can also define SVG filters in your markup, and then apply them to another element using CSS. Confused? Let&amp;rsquo;s look at some code.&lt;/p&gt;

&lt;pre title=&quot;SVG Markup&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;
&amp;lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&amp;gt;
    &amp;lt;filter id=&quot;svgBlur&quot;&amp;gt;
        &amp;lt;feGaussianBlur stdDeviation=&quot;5&quot; /&amp;gt;
    &amp;lt;/filter&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are 2 things you want to pay attention to here: &lt;code&gt;id=&quot;svgBlur&quot;&lt;/code&gt; and &lt;code&gt;stdDeviation=&quot;5&quot;&lt;/code&gt;. The &lt;code&gt;ID&lt;/code&gt; is how you&amp;rsquo;re going to reference the SVG filter in your CSS later. The &lt;code&gt;stdDeviation&lt;/code&gt; is the radius of your blur, in pixels.&lt;/p&gt;

&lt;pre title=&quot;CSS&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;
img {
    filter: url(#svgBlur);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty simple here. You&amp;rsquo;re just referencing the &lt;code&gt;ID&lt;/code&gt; of the SVG filter you put in your markup.&lt;/p&gt;

&lt;h3&gt;Things to note&amp;hellip;&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s kind of gross to put display code in your markup. That&amp;rsquo;s what CSS for, and it&amp;rsquo;s just not great for code maintenance. It also makes it a little more difficult to make adjustments. If you decide you want a 10px blur instead of 5px, you have to crack open your markup file and change it in there. You also have to include that SVG markup on every page you want to use the filter.&lt;/p&gt;

&lt;h2&gt;But hey what about Data URIs&lt;/h2&gt;

&lt;p&gt;You can improve on the SVG markup approach using Data URIs. This improves maintenance a little, but it still feels out of place. Anyway, here&amp;rsquo;s what that would look like:&lt;/p&gt;

&lt;pre title=&quot;SVG Data URI&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;
img {
    filter: url(data:image/svg+xml,&amp;lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&amp;gt;&amp;lt;filter id=&quot;svgBlur&quot;&amp;gt;&amp;lt;feGaussianBlur stdDeviation=&quot;5&quot; /&amp;gt;&amp;lt;/filter&amp;gt;&amp;lt;/svg&amp;gt;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s long, but it&amp;rsquo;s all in one place. If you&amp;rsquo;re using blur all over the place your CSS file will start to get pretty large, but you could do worse. You could even clean it up quite a bit with a little Sass or LESS.&lt;/p&gt;

&lt;h2&gt;There&amp;rsquo;s also one other way&amp;hellip;&lt;/h2&gt;

&lt;p&gt;There is another way to include SVG filters in CSS, but I&amp;rsquo;m not going to go too far into it. Essentially you would create a file &amp;mdash; say &lt;code&gt;filters.svg&lt;/code&gt; &amp;mdash; that would contain all of the filters you want to use, with IDs on each of them. You would then reference that filter in your CSS like &lt;code&gt;filter: url(filters.svg#blur)&lt;/code&gt;. Honestly I think Data URIs are probably the way to go if you need to support more than webkit.&lt;/p&gt;

&lt;h1&gt;So We&amp;rsquo;re Good Then Right?&lt;/h1&gt;

&lt;p&gt;While we&amp;rsquo;ve improved our browser support pretty significantly, we haven&amp;rsquo;t changed the way the filter itself behaves at all. All of the quirks still exist, they just exist in more browsers.&lt;/p&gt;

&lt;p&gt;Personally I would wait until &lt;code&gt;filter: blur()&lt;/code&gt; gets better support, and I would wait until the filter itself works a little better, especially if you need transitions. But if you have to have CSS blur &lt;em&gt;right now&lt;/em&gt;, it can be done.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Dec 2013 16:38:21 -0500</pubDate>
        <link>http://omit.io/2013/12/13/make-a-thing-blurry-with-css/</link>
        <guid isPermaLink="true">http://omit.io/2013/12/13/make-a-thing-blurry-with-css/</guid>
      </item>
    
      <item>
        <title>Avoiding Gross Javascript with Templates</title>
        <description>&lt;h2 id=&quot;mustache-handlebars-underscore-ejs-hoganhellip&quot;&gt;Mustache, Handlebars, Underscore, EJS, Hogan…&lt;/h2&gt;

&lt;p&gt;There are a ton of JavaScript templating engines out there right now, but they all do more or less the same thing. They allow you separate your display layer from your application layer. I&amp;rsquo;m sure you&amp;rsquo;ve seen a chunk of jQuery that looks like this&amp;hellip;&lt;/p&gt;

&lt;pre title=&quot;Yucky jQuery&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
$instagrams.append(
    &#39;&amp;lt;div class=&quot;instagram&quot;&amp;gt;&#39; +
        &#39;&amp;lt;div class=&quot;user&quot;&amp;gt;&#39; +
            &#39;&amp;lt;img src=&quot;&#39; + this.user.profile_picture + &#39;&quot; /&amp;gt;&#39; +
            &#39;&amp;lt;h1&amp;gt;&#39; + this.user.full_name + &#39;&amp;lt;/h1&amp;gt;&#39; +
        &#39;&amp;lt;/div&amp;gt;&#39; +
        &#39;&amp;lt;img src=&quot;&#39; + this.images.low_resolution.url + &#39;&quot; /&amp;gt;&#39; +
    &#39;&amp;lt;/div&amp;gt;&#39;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s code that I wrote. Recently. I&amp;rsquo;m ashamed.&lt;/p&gt;

&lt;h2&gt;But this is probably complicated stuff, right?&lt;/h2&gt;

&lt;p&gt;Not at all! There are some really pretty, super well structured ways to do JavaScript templating, but if you&amp;rsquo;re not ready to take the deep dive you can get into it very easily right meow.&lt;/p&gt;

&lt;p&gt;Here I&amp;rsquo;m going to show you how to take some data from the Instagram API and place it on the page. We&amp;rsquo;re going to be using &lt;a href=&quot;http://mustache.github.io/&quot;&gt;mustache&lt;/a&gt; here, which is a logic-less templating engine. There are much more &amp;ldquo;powerful&amp;rdquo; engines out there, like &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars&lt;/a&gt;, but for our purposes mustache will do very nicely.&lt;/p&gt;

&lt;p&gt;There are basically 2 parts to templating: data, and the template itself. We&amp;rsquo;ll start with the data.&lt;/p&gt;

&lt;h3&gt;Data&lt;/h3&gt;

&lt;p&gt;Mustache &amp;mdash; and every other JS templating engine I&amp;rsquo;ve seen &amp;mdash; just uses a simple JS object. Nothing fancy. This means the JSON that we get back from the Instagram API is mostly good to go. This is what our AJAX call will look like:&lt;/p&gt;

&lt;pre title=&quot;AJAX&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var $instagrams       = $(&#39;.instagrams&#39;),
    feedPath          = &#39;https://api.instagram.com/v1/media/popular?client_id=2751b9d3ef1948da8c6eeceefe3fb718&amp;amp;count=3&#39;,
    gettingInstagrams = $.ajax({

        url: feedPath,
        dataType: &#39;jsonp&#39;

    }).done(function(json) {

        var template = $(&#39;#instagramSuccess&#39;).html(),
            html, data;

        html = Mustache.to_html(template, { photos : json.data });
        $instagrams.append(html);

    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So &lt;code&gt;$instagrams&lt;/code&gt; is where we&amp;rsquo;ll be appending our photos later, and &lt;code&gt;feedPath&lt;/code&gt; is the path for our API query. Then we set up a basic AJAX call.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var template = $(&#39;#instagramSuccess&#39;).html()&lt;/code&gt; grabs the code for our HTML template, which you&amp;rsquo;ll see later. Once we&amp;rsquo;ve got the template, we call &lt;code&gt;Mustache.to_html&lt;/code&gt;. The first parameter is our template, and the second parameter is our data object. In our case &lt;code&gt;json.data&lt;/code&gt; is actually an array, so we have to assign it to an object property. We&amp;rsquo;ll see more how that comes in handy when we talk about the HTML template.&lt;/p&gt;

&lt;p&gt;Which is now.&lt;/p&gt;

&lt;h3&gt;The Template&lt;/h3&gt;

&lt;p&gt;The simplest way to implement a Mustache template is to wrap in a script tag, and place it in your HTML or view file. It would be wise to place all of your templates together at the bottom of your file. This is just basic HTML, with Mustache variables.&lt;/p&gt;

&lt;pre title=&quot;Mustache Template&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;

&amp;lt;script id=&quot;instagramSuccess&quot; type=&quot;text/template&quot;&amp;gt;
  
  &amp;lt;div class=&quot;instagram&quot;&amp;gt;
    &amp;lt;div class=&quot;user&quot;&amp;gt;
      &amp;lt;img src=&quot;&quot; /&amp;gt;
      &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;img src=&quot;&quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
  
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two things are required on your template: an ID, and &lt;code&gt;type=&quot;text/template&quot;&lt;/code&gt;. You &lt;em&gt;could&lt;/em&gt; use a class instead of an ID, but since you&amp;rsquo;ll want to make sure this is a completely unique element, you might as well use an ID.&lt;/p&gt;

&lt;p&gt;The template starts with &lt;code&gt;&lt;/code&gt;. You may notice this is the same object property we assigned &lt;code&gt;json.data&lt;/code&gt; to earlier. &lt;code&gt;&lt;/code&gt; tells Mustache that you&amp;rsquo;re trying to loop over an array, and the value (in our case &lt;em&gt;photos&lt;/em&gt;) tells Mustache what property stores the array in the data you sent it. If there are 12 array items stored in &lt;code&gt;photos&lt;/code&gt; this template will be repeated 12 times.&lt;/p&gt;

&lt;p&gt;The rest of the variables match up to the JSON data returned by the Instagram API. The variable name tells it what object property you want, and then when you call &lt;code&gt;Mustache.to_html&lt;/code&gt; it replaces that variable with the value of whatever property you&amp;rsquo;re referencing.&lt;/p&gt;

&lt;h3&gt;The Result&lt;/h3&gt;

&lt;p&gt;The end result should look something like this.&lt;/p&gt;

&lt;p data-height=&quot;300&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;EvKbH&quot; data-user=&quot;frxnz&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/frxnz/pen/EvKbH&quot;&gt;JavaScript Templates&lt;/a&gt; by Derek Wheelden (&lt;a href=&quot;http://codepen.io/frxnz&quot;&gt;@frxnz&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You can see it bigger and play around with the code &lt;a href=&quot;http://codepen.io/frxnz/pen/AshKo&quot;&gt;on CodePen&lt;/a&gt;. And if you want to see how the Instagram data relates to the template variables, take a look at the &lt;a href=&quot;https://api.instagram.com/v1/media/popular?client_id=2751b9d3ef1948da8c6eeceefe3fb718&amp;amp;count=3&quot;&gt;raw JSON&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I tend to use JavaScript a lot for integrating API feeds into sites, and I&amp;rsquo;ve always thought that converting HTML to a JS string and dumping it into an append was super gross. JS templating solves that problem by allowing you to write your template in plain old HTML, and use JS to inject actual data values. A good website should do its best to separate display from logic, and templating engines like Mustache make it really easy to do so.&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Oct 2013 17:38:21 -0400</pubDate>
        <link>http://omit.io/2013/10/27/avoiding-gross-javascript-with-templates/</link>
        <guid isPermaLink="true">http://omit.io/2013/10/27/avoiding-gross-javascript-with-templates/</guid>
      </item>
    
      <item>
        <title>Off-Screen Mobile Navigation Menu</title>
        <description>&lt;h2 id=&quot;this-thing-is-so-much-easier-than-it-looks&quot;&gt;This thing is so much easier than it looks&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s just start off with the demo, because I couldn&amp;rsquo;t think of a good way to describe this in a post title, so you might not have any idea what I&amp;rsquo;m talking about. If you don&amp;rsquo;t like reading just &lt;a href=&quot;http://codepen.io/frxnz/pen/ptoeu&quot;&gt;skip to the Pen&lt;/a&gt;.&lt;/p&gt;

&lt;p data-height=&quot;600&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;ptoeu&quot; data-user=&quot;frxnz&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/frxnz/pen/ptoeu&quot;&gt;ptoeu&lt;/a&gt; by Derek Wheelden (&lt;a href=&quot;http://codepen.io/frxnz&quot;&gt;@frxnz&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So the blue box represents the edges of your mobile viewport. Everything &lt;em&gt;inside&lt;/em&gt; the box you see, everything else you don&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;When you click the menu button (the guy with the three horizontal lines), the menu slides into the box, and some of the content slides out. Same deal, everything inside the box is visible, everything outside is not.&lt;/p&gt;

&lt;h2&gt;Let&amp;rsquo;s dig into the code&lt;/h2&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;p&gt;The HTML is easy. You just use your standard nav markup. This is extremely flexible, basically the only requirements are the outer-wrapper and a nav container. The outer wrapper &lt;em&gt;must&lt;/em&gt; wrap all of your body markup.&lt;/p&gt;

&lt;pre title=&quot;HTML&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class=&quot;#outer-wrapper&quot;&amp;gt;
        &amp;lt;!-- Header Code, Whatever --&amp;gt;
        &amp;lt;nav role=&#39;navigation&#39;&amp;gt;
            &amp;lt;ul&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Clients&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Contact Us&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
            &amp;lt;a href=&quot;#&quot; id=&quot;nav-toggle&quot;&amp;gt;&amp;lt;/a&amp;gt;
        &amp;lt;/nav&amp;gt;
        &amp;lt;!-- Any other markup --&amp;gt;
    &amp;lt;/div&amp;gt; &amp;lt;!-- // #outer-wrapper --&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;JavaScript&lt;/h3&gt;

&lt;p&gt;The JavaScript is also very easy. Basically all you&amp;rsquo;re doing here is toggling a class on your outer wrapper, which will make your CSS transition fire.&lt;/p&gt;

&lt;pre title=&quot;JavaScript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
$(&#39;#nav-toggle&#39;).on(&#39;click&#39;, function(e) {
    $(&#39;#outer-wrapper&#39;).toggleClass(&#39;nav-open&#39;);

    // If you used an anchor tag for your menu button
    e.preventDefault();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;CSS&lt;/h3&gt;

&lt;p&gt;This is where the magic happens. There are also a few more picky details here, but it&amp;rsquo;s still fairly simple. Below are the minimum styles you need to make this work, you can certainly add to this.&lt;/p&gt;

&lt;pre title=&quot;SCSS&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;
$nav-width: 20em; // Can be em, px, %, rem

#outer-wrapper {
    position: relative;
    min-height: 100%;
    transition: transform 0.25s;
    -webkit-backface-visibility: hidden; // Chrome/OSX bug fix

    &amp;amp;.nav-open {
        transform: translate3d($nav-width, 0, 0);
    }
}

nav {
    position: absolute;
    top: 0;
    left: -$nav-width;
    width: $nav-width;
    min-height: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should be pretty straight-forward, which just a couple important pieces&amp;hellip;&lt;/p&gt;

&lt;h4&gt;$nav-width&lt;/h4&gt;

&lt;p&gt;This is really the pickiest part of the whole deal. We use this in three places: &lt;code&gt;transform&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, and &lt;code&gt;width&lt;/code&gt;. The value itself isn&amp;rsquo;t super important (it should be less than the container width, is all), but it&amp;rsquo;s very important that all three values be the same (&lt;code&gt;left&lt;/code&gt; being negative). &lt;code&gt;width&lt;/code&gt; defines the width, &lt;code&gt;left&lt;/code&gt; takes the nav off-screen, and &lt;code&gt;transform&lt;/code&gt; moves the outer-wrapper enough to show the whole nav on screen.&lt;/p&gt;

&lt;h4&gt;translate3d&lt;/h4&gt;

&lt;p&gt;The magic of &lt;code&gt;transform&lt;/code&gt; is that it moves things without affecting the layout of the page. So when we translate the entire page to the right, we don&amp;rsquo;t get scrollbars or anything weird. It just repaints everything &lt;code&gt;$nav-width&lt;/code&gt; to the right.&lt;/p&gt;

&lt;p&gt;You might be thinking &amp;ldquo;wouldn&amp;rsquo;t &lt;code&gt;transform: translateX($nav-width)&lt;/code&gt; make more sense?&amp;rdquo; The answer is&amp;hellip;sort of. &lt;code&gt;translateX&lt;/code&gt; is less verbose and more straight-forward than &lt;code&gt;translate3d&lt;/code&gt;, but there&amp;rsquo;s a very good reason for doing it this way: &lt;strong&gt;hardware acceleration&lt;/strong&gt;. Mobile browsers aren&amp;rsquo;t the most high-performance things in the world, and 2D transforms can often look pretty choppy. But 3D transforms like &lt;code&gt;translate3d&lt;/code&gt; get the GPU involved, and the hardware accelartion makes things oh so smooth.&lt;/p&gt;

&lt;h2&gt;And that&amp;rsquo;s it&lt;/h2&gt;

&lt;p&gt;Hopefully this makes sense, and if you want to dig into the code more &lt;a href=&quot;http://codepen.io/frxnz/pen/ptoeu&quot;&gt;go over to the Pen&lt;/a&gt; and play around with it. The code is surprisingly flexible.&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Oct 2013 17:38:21 -0400</pubDate>
        <link>http://omit.io/2013/10/24/off-screen-mobile-navigation-menu/</link>
        <guid isPermaLink="true">http://omit.io/2013/10/24/off-screen-mobile-navigation-menu/</guid>
      </item>
    
  </channel>
</rss>
